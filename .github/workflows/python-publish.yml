# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on: 
  workflow_dispatch:
    inputs:
      release:
        description: 'Release Version'
        required: true
        type: string
      environment:
        description: 'PyPi Environment'
        required: true
        type: choice
        options: 
        - production
        - testing

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v6.1.0      

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish-production:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi

    steps:
      - name: Check inputs and set env var
        env:
          URL: ${{ inputs.environment }}
        run: |
          local PUBLISH_ENDPOINT=''
          if [[ $ENVIRONMENT == 'production' ]]; then
            URL='https://pypi.org/p/pagerduty-mcp-server'
          elif [[ $ENVIRONMENT == 'testing' ]]; then
            URL='https://test.pypi.org/p/pagerduty-mcp-server'
          fi
          echo "PUBLISH_ENDPOINT=$URL" >> $GITHUB_ENV
    
      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v6.1.0
        
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPi
        run: uv publish --publish-url ${{ env.PUBLISH_ENDPOINT }}


      
